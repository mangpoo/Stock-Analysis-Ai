{"ast":null,"code":"// src/contexts/UserContext.js\nimport{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const UserContext=/*#__PURE__*/createContext();export function UserProvider(_ref){let{children}=_ref;const[user,setUser]=useState(null);// ✅ 마운트 시 localStorage에서 사용자 정보 불러오기 (예외 처리 포함)\nuseEffect(()=>{try{const savedUser=localStorage.getItem('user');if(savedUser){const parsed=JSON.parse(savedUser);if(parsed&&typeof parsed==='object'){setUser(parsed);}}}catch(err){console.warn('❌ 사용자 정보 로딩 실패:',err);localStorage.removeItem('user');}},[]);// ✅ user 변경 시 localStorage에 반영\nuseEffect(()=>{try{if(user&&typeof user==='object'){localStorage.setItem('user',JSON.stringify(user));}else{localStorage.removeItem('user');}}catch(err){console.warn('❌ 사용자 정보 저장 실패:',err);}},[user]);return/*#__PURE__*/_jsx(UserContext.Provider,{value:{user,setUser},children:children});}export function useUser(){return useContext(UserContext);}","map":{"version":3,"names":["createContext","useContext","useState","useEffect","jsx","_jsx","UserContext","UserProvider","_ref","children","user","setUser","savedUser","localStorage","getItem","parsed","JSON","parse","err","console","warn","removeItem","setItem","stringify","Provider","value","useUser"],"sources":["C:/Users/zimokang/Desktop/Desktop_VSCODE/Front/Login_Test/Stock-Analysis-Ai/src/contexts/UserContext.js"],"sourcesContent":["// src/contexts/UserContext.js\r\nimport { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst UserContext = createContext();\r\n\r\nexport function UserProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n\r\n  // ✅ 마운트 시 localStorage에서 사용자 정보 불러오기 (예외 처리 포함)\r\n  useEffect(() => {\r\n    try {\r\n      const savedUser = localStorage.getItem('user');\r\n      if (savedUser) {\r\n        const parsed = JSON.parse(savedUser);\r\n        if (parsed && typeof parsed === 'object') {\r\n          setUser(parsed);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.warn('❌ 사용자 정보 로딩 실패:', err);\r\n      localStorage.removeItem('user');\r\n    }\r\n  }, []);\r\n\r\n  // ✅ user 변경 시 localStorage에 반영\r\n  useEffect(() => {\r\n    try {\r\n      if (user && typeof user === 'object') {\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n      } else {\r\n        localStorage.removeItem('user');\r\n      }\r\n    } catch (err) {\r\n      console.warn('❌ 사용자 정보 저장 실패:', err);\r\n    }\r\n  }, [user]);\r\n\r\n  return (\r\n    <UserContext.Provider value={{ user, setUser }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useUser() {\r\n  return useContext(UserContext);\r\n}\r\n"],"mappings":"AAAA;AACA,OAASA,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEvE,KAAM,CAAAC,WAAW,cAAGN,aAAa,CAAC,CAAC,CAEnC,MAAO,SAAS,CAAAO,YAAYA,CAAAC,IAAA,CAAe,IAAd,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CAEtC;AACAC,SAAS,CAAC,IAAM,CACd,GAAI,CACF,KAAM,CAAAS,SAAS,CAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAC9C,GAAIF,SAAS,CAAE,CACb,KAAM,CAAAG,MAAM,CAAGC,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC,CACpC,GAAIG,MAAM,EAAI,MAAO,CAAAA,MAAM,GAAK,QAAQ,CAAE,CACxCJ,OAAO,CAACI,MAAM,CAAC,CACjB,CACF,CACF,CAAE,MAAOG,GAAG,CAAE,CACZC,OAAO,CAACC,IAAI,CAAC,iBAAiB,CAAEF,GAAG,CAAC,CACpCL,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC,CACjC,CACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACAlB,SAAS,CAAC,IAAM,CACd,GAAI,CACF,GAAIO,IAAI,EAAI,MAAO,CAAAA,IAAI,GAAK,QAAQ,CAAE,CACpCG,YAAY,CAACS,OAAO,CAAC,MAAM,CAAEN,IAAI,CAACO,SAAS,CAACb,IAAI,CAAC,CAAC,CACpD,CAAC,IAAM,CACLG,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC,CACjC,CACF,CAAE,MAAOH,GAAG,CAAE,CACZC,OAAO,CAACC,IAAI,CAAC,iBAAiB,CAAEF,GAAG,CAAC,CACtC,CACF,CAAC,CAAE,CAACR,IAAI,CAAC,CAAC,CAEV,mBACEL,IAAA,CAACC,WAAW,CAACkB,QAAQ,EAACC,KAAK,CAAE,CAAEf,IAAI,CAAEC,OAAQ,CAAE,CAAAF,QAAA,CAC5CA,QAAQ,CACW,CAAC,CAE3B,CAEA,MAAO,SAAS,CAAAiB,OAAOA,CAAA,CAAG,CACxB,MAAO,CAAAzB,UAAU,CAACK,WAAW,CAAC,CAChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}