{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kimseungwoon\\\\Desktop\\\\REACT\\\\Stock-Analysis-Ai\\\\stock-analysis-ai-react\\\\src\\\\components\\\\Header.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Header.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Header() {\n  _s();\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n  const [message, setMessage] = useState('');\n  const [showResults, setShowResults] = useState(false); // 결과 창 표시 여부\n  const searchContainerRef = useRef(null); // 검색 영역 참조\n\n  // --- 검색창 외부 클릭 감지 Hook ---\n  useEffect(() => {\n    function handleClickOutside(event) {\n      // searchContainerRef.current가 존재하고, 클릭된 요소가 searchContainerRef.current 내부에 없으면\n      if (searchContainerRef.current && !searchContainerRef.current.contains(event.target)) {\n        setShowResults(false); // 결과 창 숨기기\n      }\n    }\n    // 이벤트 리스너 등록\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    // 컴포넌트 언마운트 시 이벤트 리스너 제거\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [searchContainerRef]);\n\n  // --- 검색어 변경 감지 및 API 호출 Hook ---\n  useEffect(() => {\n    // 검색어가 비어있으면 결과와 메시지를 초기화하고 숨김\n    if (!query.trim()) {\n      setResults([]);\n      setMessage('');\n      setShowResults(false);\n      return;\n    }\n    setShowResults(true); // 입력 시 결과 창 표시\n\n    // 디바운싱 타이머 설정\n    const timeoutId = setTimeout(async () => {\n      try {\n        // !!! 중요: '/search?q=' 부분을 실제 운영하시는 백엔드 API 엔드포인트로 교체해야 합니다. !!!\n        // 백엔드에서는 쿼리 파라미터(q)를 받아 주식 정보를 검색하고 JSON 형태로 반환해야 합니다.\n        // 예: const res = await fetch(`https://your-api.com/stocks?query=${encodeURIComponent(query)}`);\n\n        // --- 여기서는 예시를 위해 Mock API를 사용합니다 ---\n        const mockFetch = q => {\n          return new Promise(resolve => {\n            setTimeout(() => {\n              const mockData = [{\n                ticker: \"AAPL\",\n                name: \"Apple Inc.\",\n                source: \"NASDAQ\"\n              }, {\n                ticker: \"GOOGL\",\n                name: \"Alphabet Inc.\",\n                source: \"NASDAQ\"\n              }, {\n                ticker: \"MSFT\",\n                name: \"Microsoft Corp.\",\n                source: \"NASDAQ\"\n              }, {\n                ticker: \"AMZN\",\n                name: \"Amazon.com, Inc.\",\n                source: \"NASDAQ\"\n              }, {\n                ticker: \"TSLA\",\n                name: \"Tesla, Inc.\",\n                source: \"NASDAQ\"\n              }, {\n                ticker: \"005930\",\n                name: \"삼성전자\",\n                source: \"KOSPI\"\n              }, {\n                ticker: \"035420\",\n                name: \"NAVER\",\n                source: \"KOSPI\"\n              }].filter(stock => stock.name.toLowerCase().includes(q.toLowerCase()) || stock.ticker.toLowerCase().includes(q.toLowerCase()));\n              resolve({\n                ok: true,\n                json: () => Promise.resolve(mockData)\n              });\n            }, 150); // 네트워크 지연 시뮬레이션\n          });\n        };\n        const res = await mockFetch(query); // 실제로는: await fetch(...)\n        // --- Mock API 끝 ---\n\n        if (!res.ok) {\n          throw new Error('네트워크 응답이 올바르지 않습니다.');\n        }\n        const data = await res.json();\n        if (data.length === 0) {\n          setResults([]);\n          setMessage('검색 결과가 없습니다.');\n        } else {\n          setResults(data);\n          setMessage('');\n        }\n      } catch (error) {\n        console.error('검색 중 오류 발생:', error);\n        setResults([]);\n        setMessage('검색 중 오류가 발생했습니다.');\n      }\n    }, 300); // 300ms 디바운스\n\n    // cleanup 함수: 이전 타이머를 취소하여 마지막 입력 후 300ms가 지나면 API 호출\n    return () => clearTimeout(timeoutId);\n  }, [query]); // 'query' 상태가 변경될 때마다 이 Hook을 실행\n\n  // 입력창 핸들러\n  const handleInputChange = e => {\n    setQuery(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"header\", {\n    className: \"header\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      ref: searchContainerRef,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"search-input\",\n        placeholder: \"\\uD83D\\uDD0D \\uC885\\uBAA9\\uBA85 \\uB610\\uB294 \\uD2F0\\uCEE4 \\uAC80\\uC0C9\",\n        value: query,\n        onChange: handleInputChange,\n        onFocus: () => query && setShowResults(true) // 포커스 시 결과가 있으면 보여줌\n        ,\n        autoComplete: \"off\" // 자동완성 끄기\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), showResults && query.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-results\",\n        children: [results.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: results.map(({\n            ticker,\n            name,\n            source\n          }) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: `[${ticker}] ${name} (${source})`\n          }, ticker, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 15\n        }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-message\",\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"login-btn\",\n      children: \"\\uB85C\\uADF8\\uC778\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(Header, \"mtCYoEo8L0xCKo7iP2alsmzbLBs=\");\n_c = Header;\nvar _c;\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Header","_s","query","setQuery","results","setResults","message","setMessage","showResults","setShowResults","searchContainerRef","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","trim","timeoutId","setTimeout","mockFetch","q","Promise","resolve","mockData","ticker","name","source","filter","stock","toLowerCase","includes","ok","json","res","Error","data","length","error","console","clearTimeout","handleInputChange","e","value","className","children","ref","placeholder","onChange","onFocus","autoComplete","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["C:/Users/kimseungwoon/Desktop/REACT/Stock-Analysis-Ai/stock-analysis-ai-react/src/components/Header.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './Header.css';\r\n\r\nexport default function Header() {\r\n  const [query, setQuery] = useState('');\r\n  const [results, setResults] = useState([]);\r\n  const [message, setMessage] = useState('');\r\n  const [showResults, setShowResults] = useState(false); // 결과 창 표시 여부\r\n  const searchContainerRef = useRef(null); // 검색 영역 참조\r\n\r\n  // --- 검색창 외부 클릭 감지 Hook ---\r\n  useEffect(() => {\r\n    function handleClickOutside(event) {\r\n      // searchContainerRef.current가 존재하고, 클릭된 요소가 searchContainerRef.current 내부에 없으면\r\n      if (searchContainerRef.current && !searchContainerRef.current.contains(event.target)) {\r\n        setShowResults(false); // 결과 창 숨기기\r\n      }\r\n    }\r\n    // 이벤트 리스너 등록\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    // 컴포넌트 언마운트 시 이벤트 리스너 제거\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, [searchContainerRef]);\r\n\r\n  // --- 검색어 변경 감지 및 API 호출 Hook ---\r\n  useEffect(() => {\r\n    // 검색어가 비어있으면 결과와 메시지를 초기화하고 숨김\r\n    if (!query.trim()) {\r\n      setResults([]);\r\n      setMessage('');\r\n      setShowResults(false);\r\n      return;\r\n    }\r\n\r\n    setShowResults(true); // 입력 시 결과 창 표시\r\n\r\n    // 디바운싱 타이머 설정\r\n    const timeoutId = setTimeout(async () => {\r\n      try {\r\n        // !!! 중요: '/search?q=' 부분을 실제 운영하시는 백엔드 API 엔드포인트로 교체해야 합니다. !!!\r\n        // 백엔드에서는 쿼리 파라미터(q)를 받아 주식 정보를 검색하고 JSON 형태로 반환해야 합니다.\r\n        // 예: const res = await fetch(`https://your-api.com/stocks?query=${encodeURIComponent(query)}`);\r\n\r\n        // --- 여기서는 예시를 위해 Mock API를 사용합니다 ---\r\n        const mockFetch = (q) => {\r\n          return new Promise(resolve => {\r\n            setTimeout(() => {\r\n              const mockData = [\r\n                { ticker: \"AAPL\", name: \"Apple Inc.\", source: \"NASDAQ\" },\r\n                { ticker: \"GOOGL\", name: \"Alphabet Inc.\", source: \"NASDAQ\" },\r\n                { ticker: \"MSFT\", name: \"Microsoft Corp.\", source: \"NASDAQ\" },\r\n                { ticker: \"AMZN\", name: \"Amazon.com, Inc.\", source: \"NASDAQ\" },\r\n                { ticker: \"TSLA\", name: \"Tesla, Inc.\", source: \"NASDAQ\" },\r\n                { ticker: \"005930\", name: \"삼성전자\", source: \"KOSPI\" },\r\n                { ticker: \"035420\", name: \"NAVER\", source: \"KOSPI\" },\r\n              ].filter(stock =>\r\n                stock.name.toLowerCase().includes(q.toLowerCase()) ||\r\n                stock.ticker.toLowerCase().includes(q.toLowerCase())\r\n              );\r\n              resolve({ ok: true, json: () => Promise.resolve(mockData) });\r\n            }, 150); // 네트워크 지연 시뮬레이션\r\n          });\r\n        };\r\n        const res = await mockFetch(query); // 실제로는: await fetch(...)\r\n        // --- Mock API 끝 ---\r\n\r\n        if (!res.ok) {\r\n          throw new Error('네트워크 응답이 올바르지 않습니다.');\r\n        }\r\n\r\n        const data = await res.json();\r\n\r\n        if (data.length === 0) {\r\n          setResults([]);\r\n          setMessage('검색 결과가 없습니다.');\r\n        } else {\r\n          setResults(data);\r\n          setMessage('');\r\n        }\r\n      } catch (error) {\r\n        console.error('검색 중 오류 발생:', error);\r\n        setResults([]);\r\n        setMessage('검색 중 오류가 발생했습니다.');\r\n      }\r\n    }, 300); // 300ms 디바운스\r\n\r\n    // cleanup 함수: 이전 타이머를 취소하여 마지막 입력 후 300ms가 지나면 API 호출\r\n    return () => clearTimeout(timeoutId);\r\n  }, [query]); // 'query' 상태가 변경될 때마다 이 Hook을 실행\r\n\r\n  // 입력창 핸들러\r\n  const handleInputChange = (e) => {\r\n    setQuery(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      {/* 검색창과 결과를 감싸는 컨테이너 */}\r\n      <div className=\"search-container\" ref={searchContainerRef}>\r\n        <input\r\n          className=\"search-input\"\r\n          placeholder=\"🔍 종목명 또는 티커 검색\"\r\n          value={query}\r\n          onChange={handleInputChange}\r\n          onFocus={() => query && setShowResults(true)} // 포커스 시 결과가 있으면 보여줌\r\n          autoComplete=\"off\" // 자동완성 끄기\r\n        />\r\n        {/* showResults가 true이고, 검색어가 있을 때만 결과 창 표시 */}\r\n        {showResults && query.length > 0 && (\r\n          <div className=\"search-results\">\r\n            {results.length > 0 && (\r\n              <ul>\r\n                {results.map(({ ticker, name, source }) => (\r\n                  <li key={ticker}>\r\n                    {`[${ticker}] ${name} (${source})`}\r\n                    {/* onClick 핸들러를 추가하여 종목 선택 시 동작 구현 가능 */}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            )}\r\n            {message && <div className=\"search-message\">{message}</div>}\r\n          </div>\r\n        )}\r\n      </div>\r\n      <button className=\"login-btn\">로그인</button>\r\n    </header>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}