{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zimokang\\\\OneDrive - \\uD55C\\uACBD\\uAD6D\\uB9BD\\uB300\\uD559\\uAD50\\\\\\uD55C\\uACBD\\uB300\\uD559\\uAD50 3-1\\\\\\uACFC\\uBAA9\\\\\\uBB38\\uD574\\uD5043\\\\VScode\\\\Stock-Analysis-Ai\\\\stock-analysis-ai-react\\\\src\\\\pages\\\\ChatBox.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatStatic() {\n  _s();\n  const [reply, setReply] = useState('GPT에게 질문 중입니다...');\n  useEffect(() => {\n    const fetchGPT = async () => {\n      const API_KEY = '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'; // 테스트용\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${API_KEY}`\n        },\n        body: JSON.stringify({\n          model: 'gpt-3.5-turbo',\n          messages: [{\n            role: 'user',\n            content: '삼성전자에 대해 간단히 설명해줘.'\n          }]\n        })\n      });\n      const data = await response.json();\n      if (!data.choices || !data.choices[0]) {\n        setReply('GPT 응답을 불러올 수 없습니다.');\n        console.error('응답 오류:', data);\n        return;\n      }\n      setReply(data.choices[0].message.content);\n    };\n    fetchGPT();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '40px',\n      maxWidth: '700px',\n      margin: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"GPT\\uC758 \\uB300\\uB2F5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        whiteSpace: 'pre-wrap'\n      },\n      children: reply\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatStatic, \"ynGS/M2WgEBZohnj1yXRLpfspGk=\");\n_c = ChatStatic;\nvar _c;\n$RefreshReg$(_c, \"ChatStatic\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ChatStatic","_s","reply","setReply","fetchGPT","API_KEY","response","fetch","method","headers","Authorization","body","JSON","stringify","model","messages","role","content","data","json","choices","console","error","message","style","padding","maxWidth","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","whiteSpace","_c","$RefreshReg$"],"sources":["C:/Users/zimokang/OneDrive - 한경국립대학교/한경대학교 3-1/과목/문해프3/VScode/Stock-Analysis-Ai/stock-analysis-ai-react/src/pages/ChatBox.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nexport default function ChatStatic() {\r\n  const [reply, setReply] = useState('GPT에게 질문 중입니다...');\r\n\r\n  useEffect(() => {\r\n    const fetchGPT = async () => {\r\n      const API_KEY = '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'; // 테스트용\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${API_KEY}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: 'gpt-3.5-turbo',\r\n          messages: [\r\n            { role: 'user', content: '삼성전자에 대해 간단히 설명해줘.' },\r\n          ],\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!data.choices || !data.choices[0]) {\r\n        setReply('GPT 응답을 불러올 수 없습니다.');\r\n        console.error('응답 오류:', data);\r\n        return;\r\n      }\r\n\r\n      setReply(data.choices[0].message.content);\r\n    };\r\n\r\n    fetchGPT();\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ padding: '40px', maxWidth: '700px', margin: 'auto' }}>\r\n      <h2>GPT의 대답</h2>\r\n      <div style={{ whiteSpace: 'pre-wrap' }}>{reply}</div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,kBAAkB,CAAC;EAEtDD,SAAS,CAAC,MAAM;IACd,MAAMQ,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,MAAMC,OAAO,GAAG,sKAAsK,CAAC,CAAC;MACxL,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;QACzEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAE,UAAUL,OAAO;QAClC,CAAC;QACDM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,KAAK,EAAE,eAAe;UACtBC,QAAQ,EAAE,CACR;YAAEC,IAAI,EAAE,MAAM;YAAEC,OAAO,EAAE;UAAqB,CAAC;QAEnD,CAAC;MACH,CAAC,CAAC;MAEF,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;MAElC,IAAI,CAACD,IAAI,CAACE,OAAO,IAAI,CAACF,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE;QACrCjB,QAAQ,CAAC,qBAAqB,CAAC;QAC/BkB,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEJ,IAAI,CAAC;QAC7B;MACF;MAEAf,QAAQ,CAACe,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACG,OAAO,CAACN,OAAO,CAAC;IAC3C,CAAC;IAEDb,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAKyB,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,QAAQ,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAO,CAAE;IAAAC,QAAA,gBACjE7B,OAAA;MAAA6B,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBjC,OAAA;MAAKyB,KAAK,EAAE;QAAES,UAAU,EAAE;MAAW,CAAE;MAAAL,QAAA,EAAE1B;IAAK;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClD,CAAC;AAEV;AAAC/B,EAAA,CAxCuBD,UAAU;AAAAkC,EAAA,GAAVlC,UAAU;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}