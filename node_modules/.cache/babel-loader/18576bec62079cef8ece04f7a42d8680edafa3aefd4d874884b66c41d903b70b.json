{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kimseungwoon\\\\Desktop\\\\REACT\\\\Stock-Analysis-Ai\\\\stock-analysis-ai-react\\\\src\\\\components\\\\ChartSection.jsx\";\n// ChartSection.jsx\nimport React from 'react';\nimport './ChartSection.css';\n\n// 날짜를 YYYYMMDD 형식으로 포맷하는 함수\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatDate = date => {\n  const year = date.getFullYear();\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\n  const day = date.getDate().toString().padStart(2, '0');\n  return `${year}${month}${day}`;\n};\nexport default function ChartSection({\n  ticker,\n  stockName,\n  stockPrice,\n  logoUrl,\n  chartServerIp\n}) {\n  // props 받기\n\n  const handleChartAnalysis = () => {\n    console.log(`차트 분석 버튼 클릭됨: ${ticker}`);\n  };\n  const handleOtherAction = () => {\n    console.log(`다른 기능 버튼 클릭됨: ${ticker}`);\n  };\n\n  // 현재 날짜와 과거 시작 날짜 (예: 5년 전)\n  const today = new Date();\n  const fiveYearsAgo = new Date(new Date().setFullYear(today.getFullYear() - 5));\n  const startDate = formatDate(fiveYearsAgo); // YYYYMMDD 형식\n  const endDate = formatDate(today); // YYYYMMDD 형식\n\n  // iframe URL 동적 생성\n  const chartIframeSrc = `http://${chartServerIp}/chart/kr/${ticker}/${startDate}/${endDate}`;\n  if (!ticker) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-section\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uC885\\uBAA9 \\uC815\\uBCF4\\uB97C \\uBD88\\uB7EC\\uC62C \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4. \\uBAA9\\uB85D\\uC5D0\\uC11C \\uC885\\uBAA9\\uC744 \\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-header-info\",\n      children: [logoUrl ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: logoUrl,\n        alt: `${stockName || '종목'} 로고`,\n        className: \"image-placeholder\" // CSS 클래스명은 그대로 사용\n        ,\n        onError: e => {\n          // 로고 로드 실패 시 대체 텍스트 또는 기본 이미지 표시\n          e.target.style.display = 'none'; // 이미지를 숨기거나\n          // e.target.src = '기본_로고_URL'; // 기본 로고로 대체\n          // 또는 부모 요소에 텍스트 삽입\n          const parent = e.target.parentNode;\n          if (parent && parent.classList.contains('image-placeholder')) {\n            parent.textContent = '로고';\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-placeholder\",\n        children: \"\\uB85C\\uACE0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stock-info-text\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stock-name\",\n          children: stockName || ticker\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stock-price\",\n          children: stockPrice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-layout-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-iframe-container\",\n        children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n          // ticker가 변경될 때 iframe을 다시 로드하도록 key 추가\n          className: \"chart-iframe\",\n          src: chartIframeSrc,\n          title: `${stockName || ticker} Stock Chart`\n        }, ticker, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"AI \\uBD84\\uC11D (\", stockName || ticker, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleChartAnalysis,\n          children: \"\\uCC28\\uD2B8 \\uBD84\\uC11D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleOtherAction,\n          children: \"\\uB2E4\\uB978 \\uAE30\\uB2A5 1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleOtherAction,\n          children: \"\\uB2E4\\uB978 \\uAE30\\uB2A5 2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_c = ChartSection;\nvar _c;\n$RefreshReg$(_c, \"ChartSection\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","formatDate","date","year","getFullYear","month","getMonth","toString","padStart","day","getDate","ChartSection","ticker","stockName","stockPrice","logoUrl","chartServerIp","handleChartAnalysis","console","log","handleOtherAction","today","Date","fiveYearsAgo","setFullYear","startDate","endDate","chartIframeSrc","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","onError","e","target","style","display","parent","parentNode","classList","contains","textContent","title","onClick","_c","$RefreshReg$"],"sources":["C:/Users/kimseungwoon/Desktop/REACT/Stock-Analysis-Ai/stock-analysis-ai-react/src/components/ChartSection.jsx"],"sourcesContent":["// ChartSection.jsx\r\nimport React from 'react';\r\nimport './ChartSection.css';\r\n\r\n// 날짜를 YYYYMMDD 형식으로 포맷하는 함수\r\nconst formatDate = (date) => {\r\n  const year = date.getFullYear();\r\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n  const day = date.getDate().toString().padStart(2, '0');\r\n  return `${year}${month}${day}`;\r\n};\r\n\r\nexport default function ChartSection({ ticker, stockName, stockPrice, logoUrl, chartServerIp }) { // props 받기\r\n\r\n  const handleChartAnalysis = () => {\r\n    console.log(`차트 분석 버튼 클릭됨: ${ticker}`);\r\n  };\r\n\r\n  const handleOtherAction = () => {\r\n    console.log(`다른 기능 버튼 클릭됨: ${ticker}`);\r\n  };\r\n\r\n  // 현재 날짜와 과거 시작 날짜 (예: 5년 전)\r\n  const today = new Date();\r\n  const fiveYearsAgo = new Date(new Date().setFullYear(today.getFullYear() - 5));\r\n\r\n  const startDate = formatDate(fiveYearsAgo); // YYYYMMDD 형식\r\n  const endDate = formatDate(today); // YYYYMMDD 형식\r\n\r\n  // iframe URL 동적 생성\r\n  const chartIframeSrc = `http://${chartServerIp}/chart/kr/${ticker}/${startDate}/${endDate}`;\r\n\r\n  if (!ticker) {\r\n    return (\r\n      <div className=\"chart-section\">\r\n        <p>종목 정보를 불러올 수 없습니다. 목록에서 종목을 선택해주세요.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"chart-section\">\r\n      {/* ===== 종목 정보 헤더 영역 ===== */}\r\n      <div className=\"chart-header-info\">\r\n        {logoUrl ? (\r\n          <img\r\n            src={logoUrl}\r\n            alt={`${stockName || '종목'} 로고`}\r\n            className=\"image-placeholder\" // CSS 클래스명은 그대로 사용\r\n            onError={(e) => {\r\n              // 로고 로드 실패 시 대체 텍스트 또는 기본 이미지 표시\r\n              e.target.style.display = 'none'; // 이미지를 숨기거나\r\n              // e.target.src = '기본_로고_URL'; // 기본 로고로 대체\r\n              // 또는 부모 요소에 텍스트 삽입\r\n              const parent = e.target.parentNode;\r\n              if (parent && parent.classList.contains('image-placeholder')) {\r\n                parent.textContent = '로고';\r\n              }\r\n            }}\r\n          />\r\n        ) : (\r\n          <div className=\"image-placeholder\">로고</div>\r\n        )}\r\n        <div className=\"stock-info-text\">\r\n          <span className=\"stock-name\">{stockName || ticker}</span>\r\n          <span className=\"stock-price\">{stockPrice}</span>\r\n        </div>\r\n      </div>\r\n      {/* ============================ */}\r\n\r\n      <div className=\"chart-layout-container\">\r\n        <div className=\"chart-iframe-container\">\r\n          <iframe\r\n            key={ticker} // ticker가 변경될 때 iframe을 다시 로드하도록 key 추가\r\n            className=\"chart-iframe\"\r\n            src={chartIframeSrc}\r\n            title={`${stockName || ticker} Stock Chart`}\r\n          ></iframe>\r\n        </div>\r\n\r\n        <div className=\"chart-controls\">\r\n          <h3>AI 분석 ({stockName || ticker})</h3>\r\n          <button onClick={handleChartAnalysis}>차트 분석</button>\r\n          <button onClick={handleOtherAction}>다른 기능 1</button>\r\n          <button onClick={handleOtherAction}>다른 기능 2</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}