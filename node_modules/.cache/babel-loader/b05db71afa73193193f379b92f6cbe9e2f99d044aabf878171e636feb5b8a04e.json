{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kimseungwoon\\\\Desktop\\\\REACT\\\\Stock-Analysis-Ai\\\\stock-analysis-ai-react\\\\src\\\\pages\\\\Chart.jsx\",\n  _s = $RefreshSig$();\n// src/pages/Chart.jsx (파일명을 Chart.jsx 또는 ChartPage.jsx 등으로 가정)\nimport React from 'react';\nimport { useParams, useLocation } from 'react-router-dom'; // useParams와 useLocation 가져오기\nimport MainLayout from '../components/MainLayout';\nimport ChartSection from '../components/ChartSection';\nimport { useEffect, useState } from 'react'; // useState와 useEffect 추가 (필요시)\n\n// 서버 IP 주소들 (환경에 맞게 설정 필요)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LOGO_SERVER_IP = \"172.17.153.62:8080\"; // 로고 이미지 서버\nconst CHART_SERVER_IP = \"172.17.153.62:5000\"; // 차트 iframe 서버\n// 데이터 API 서버 IP (만약 state에 정보가 없을 경우 추가 정보 fetch용)\n// const DATA_API_IP = \"172.17.153.62:8080\";\n\nexport default function ChartPage() {\n  _s();\n  var _location$state, _location$state2;\n  const {\n    ticker\n  } = useParams(); // URL 파라미터에서 ticker 가져오기\n  const location = useLocation(); // navigate state에 접근하기 위해 useLocation 사용\n\n  // state에서 정보 가져오기, 없다면 기본값 또는 로딩 상태 표시\n  const passedStockName = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.stockName;\n  const passedStockPrice = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.stockPrice;\n\n  // 만약 state로 정보가 전달되지 않았을 경우 (예: 직접 URL 접근)\n  // API를 호출하여 정보를 가져오는 로직을 여기에 추가할 수 있습니다.\n  // 이 예제에서는 일단 state에 의존합니다.\n  const [stockName, setStockName] = useState(passedStockName || \"종목 정보 로딩 중...\");\n  const [stockPrice, setStockPrice] = useState(passedStockPrice !== undefined && passedStockPrice !== \"N/A\" ? typeof passedStockPrice === 'number' ? `${passedStockPrice.toLocaleString('ko-KR')}원` : passedStockPrice : \"가격 정보 로딩 중...\");\n  const [logoUrl, setLogoUrl] = useState('');\n  useEffect(() => {\n    if (ticker) {\n      setLogoUrl(`http://${LOGO_SERVER_IP}/logo/kr/${ticker}`);\n      if (!passedStockName) {\n        // 여기서 ticker를 사용해 API로 stockName 등을 가져오는 로직 추가 가능\n        // 예: fetchStockDetails(ticker).then(data => setStockName(data.name));\n        setStockName(`종목 (${ticker})`); // 임시 이름\n      }\n      // 가격 정보도 마찬가지\n    }\n  }, [ticker, passedStockName, passedStockPrice]);\n  if (!ticker) {\n    return /*#__PURE__*/_jsxDEV(MainLayout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\uC720\\uD6A8\\uD55C \\uC885\\uBAA9 \\uD2F0\\uCEE4\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(MainLayout, {\n    children: /*#__PURE__*/_jsxDEV(ChartSection, {\n      ticker: ticker,\n      stockName: stockName,\n      stockPrice: stockPrice // 이미 포맷팅 되었거나, ChartSection에서 포맷팅\n      ,\n      logoUrl: logoUrl,\n      chartServerIp: CHART_SERVER_IP // 차트 서버 IP 전달\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(ChartPage, \"X3SXQdsFIIY8PIOcudv96hyuJeA=\", false, function () {\n  return [useParams, useLocation];\n});\n_c = ChartPage;\nvar _c;\n$RefreshReg$(_c, \"ChartPage\");","map":{"version":3,"names":["React","useParams","useLocation","MainLayout","ChartSection","useEffect","useState","jsxDEV","_jsxDEV","LOGO_SERVER_IP","CHART_SERVER_IP","ChartPage","_s","_location$state","_location$state2","ticker","location","passedStockName","state","stockName","passedStockPrice","stockPrice","setStockName","setStockPrice","undefined","toLocaleString","logoUrl","setLogoUrl","children","fileName","_jsxFileName","lineNumber","columnNumber","chartServerIp","_c","$RefreshReg$"],"sources":["C:/Users/kimseungwoon/Desktop/REACT/Stock-Analysis-Ai/stock-analysis-ai-react/src/pages/Chart.jsx"],"sourcesContent":["// src/pages/Chart.jsx (파일명을 Chart.jsx 또는 ChartPage.jsx 등으로 가정)\r\nimport React from 'react';\r\nimport { useParams, useLocation } from 'react-router-dom'; // useParams와 useLocation 가져오기\r\nimport MainLayout from '../components/MainLayout';\r\nimport ChartSection from '../components/ChartSection';\r\nimport { useEffect, useState } from 'react'; // useState와 useEffect 추가 (필요시)\r\n\r\n// 서버 IP 주소들 (환경에 맞게 설정 필요)\r\nconst LOGO_SERVER_IP = \"172.17.153.62:8080\"; // 로고 이미지 서버\r\nconst CHART_SERVER_IP = \"172.17.153.62:5000\"; // 차트 iframe 서버\r\n// 데이터 API 서버 IP (만약 state에 정보가 없을 경우 추가 정보 fetch용)\r\n// const DATA_API_IP = \"172.17.153.62:8080\";\r\n\r\n\r\nexport default function ChartPage() {\r\n  const { ticker } = useParams(); // URL 파라미터에서 ticker 가져오기\r\n  const location = useLocation(); // navigate state에 접근하기 위해 useLocation 사용\r\n\r\n  // state에서 정보 가져오기, 없다면 기본값 또는 로딩 상태 표시\r\n  const passedStockName = location.state?.stockName;\r\n  const passedStockPrice = location.state?.stockPrice;\r\n\r\n  // 만약 state로 정보가 전달되지 않았을 경우 (예: 직접 URL 접근)\r\n  // API를 호출하여 정보를 가져오는 로직을 여기에 추가할 수 있습니다.\r\n  // 이 예제에서는 일단 state에 의존합니다.\r\n  const [stockName, setStockName] = useState(passedStockName || \"종목 정보 로딩 중...\");\r\n  const [stockPrice, setStockPrice] = useState(passedStockPrice !== undefined && passedStockPrice !== \"N/A\"\r\n    ? (typeof passedStockPrice === 'number' ? `${passedStockPrice.toLocaleString('ko-KR')}원` : passedStockPrice)\r\n    : \"가격 정보 로딩 중...\"\r\n  );\r\n  const [logoUrl, setLogoUrl] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (ticker) {\r\n      setLogoUrl(`http://${LOGO_SERVER_IP}/logo/kr/${ticker}`);\r\n      if (!passedStockName) {\r\n        // 여기서 ticker를 사용해 API로 stockName 등을 가져오는 로직 추가 가능\r\n        // 예: fetchStockDetails(ticker).then(data => setStockName(data.name));\r\n        setStockName(`종목 (${ticker})`); // 임시 이름\r\n      }\r\n      // 가격 정보도 마찬가지\r\n    }\r\n  }, [ticker, passedStockName, passedStockPrice]);\r\n\r\n\r\n  if (!ticker) {\r\n    return (\r\n      <MainLayout>\r\n        <div>유효한 종목 티커가 없습니다.</div>\r\n      </MainLayout>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <MainLayout>\r\n      <ChartSection\r\n        ticker={ticker}\r\n        stockName={stockName}\r\n        stockPrice={stockPrice} // 이미 포맷팅 되었거나, ChartSection에서 포맷팅\r\n        logoUrl={logoUrl}\r\n        chartServerIp={CHART_SERVER_IP} // 차트 서버 IP 전달\r\n      />\r\n    </MainLayout>\r\n  );\r\n}"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAC3D,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,YAAY,MAAM,4BAA4B;AACrD,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO,CAAC,CAAC;;AAE7C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,GAAG,oBAAoB,CAAC,CAAC;AAC7C,MAAMC,eAAe,GAAG,oBAAoB,CAAC,CAAC;AAC9C;AACA;;AAGA,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAAA,IAAAC,eAAA,EAAAC,gBAAA;EAClC,MAAM;IAAEC;EAAO,CAAC,GAAGd,SAAS,CAAC,CAAC,CAAC,CAAC;EAChC,MAAMe,QAAQ,GAAGd,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhC;EACA,MAAMe,eAAe,IAAAJ,eAAA,GAAGG,QAAQ,CAACE,KAAK,cAAAL,eAAA,uBAAdA,eAAA,CAAgBM,SAAS;EACjD,MAAMC,gBAAgB,IAAAN,gBAAA,GAAGE,QAAQ,CAACE,KAAK,cAAAJ,gBAAA,uBAAdA,gBAAA,CAAgBO,UAAU;;EAEnD;EACA;EACA;EACA,MAAM,CAACF,SAAS,EAAEG,YAAY,CAAC,GAAGhB,QAAQ,CAACW,eAAe,IAAI,eAAe,CAAC;EAC9E,MAAM,CAACI,UAAU,EAAEE,aAAa,CAAC,GAAGjB,QAAQ,CAACc,gBAAgB,KAAKI,SAAS,IAAIJ,gBAAgB,KAAK,KAAK,GACpG,OAAOA,gBAAgB,KAAK,QAAQ,GAAG,GAAGA,gBAAgB,CAACK,cAAc,CAAC,OAAO,CAAC,GAAG,GAAGL,gBAAgB,GACzG,eACJ,CAAC;EACD,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACd,IAAIU,MAAM,EAAE;MACVY,UAAU,CAAC,UAAUlB,cAAc,YAAYM,MAAM,EAAE,CAAC;MACxD,IAAI,CAACE,eAAe,EAAE;QACpB;QACA;QACAK,YAAY,CAAC,OAAOP,MAAM,GAAG,CAAC,CAAC,CAAC;MAClC;MACA;IACF;EACF,CAAC,EAAE,CAACA,MAAM,EAAEE,eAAe,EAAEG,gBAAgB,CAAC,CAAC;EAG/C,IAAI,CAACL,MAAM,EAAE;IACX,oBACEP,OAAA,CAACL,UAAU;MAAAyB,QAAA,eACTpB,OAAA;QAAAoB,QAAA,EAAK;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CAAC;EAEjB;EAEA,oBACExB,OAAA,CAACL,UAAU;IAAAyB,QAAA,eACTpB,OAAA,CAACJ,YAAY;MACXW,MAAM,EAAEA,MAAO;MACfI,SAAS,EAAEA,SAAU;MACrBE,UAAU,EAAEA,UAAW,CAAC;MAAA;MACxBK,OAAO,EAAEA,OAAQ;MACjBO,aAAa,EAAEvB,eAAgB,CAAC;IAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAEjB;AAACpB,EAAA,CAlDuBD,SAAS;EAAA,QACZV,SAAS,EACXC,WAAW;AAAA;AAAAgC,EAAA,GAFNvB,SAAS;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}