{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kimseungwoon\\\\Desktop\\\\REACT\\\\Stock-Analysis-Ai\\\\stock-analysis-ai-react\\\\src\\\\pages\\\\Chart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport MainLayout from '../components/MainLayout';\nimport ChartSection from '../components/ChartSection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SERVER_IP = \"172.17.154.182:8080\"; // 로고 및 차트 서버 IP\nconst CHANGERATE_API_BASE_URL = 'http://localhost:5000'; // API base for changerate\n\nexport default function ChartPage() {\n  _s();\n  var _location$state, _location$state2;\n  const {\n    ticker\n  } = useParams();\n  const location = useLocation();\n  const passedStockName = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.stockName;\n  const passedStockSource = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.stockSource; // Get source from navigation state\n\n  const [stockName, setStockName] = useState(passedStockName || (ticker ? `종목 (${ticker})` : \"종목 정보 로딩 중...\"));\n  const [stockPrice, setStockPrice] = useState(\"가격 정보 로딩 중...\");\n  const [stockChange, setStockChange] = useState(null); // Use null for loading/error, ChartSection handles non-numbers\n  const [logoUrl, setLogoUrl] = useState('');\n  useEffect(() => {\n    // Update stockName if passedStockName is available or ticker changes\n    if (passedStockName) {\n      setStockName(passedStockName);\n    } else if (ticker) {\n      setStockName(`종목 (${ticker})`);\n    } else {\n      setStockName(\"종목 정보 로딩 중...\"); // Fallback if no ticker\n    }\n    if (ticker && passedStockSource) {\n      setStockPrice(\"가격 정보 로딩 중...\"); // Reset on new fetch\n      setStockChange(null); // Reset on new fetch\n\n      const getCountryCode = source => {\n        if (!source) {\n          console.warn(\"Source is undefined. Cannot determine country code.\");\n          return null;\n        }\n        const s = String(source).toUpperCase();\n        if (s.includes(\"KOSPI\") || s.includes(\"KOSDAQ\") || s.includes(\"KRX\") || s === \"KR\") return 'kr';\n        if (s.includes(\"NASDAQ\") || s.includes(\"NYSE\") || s.includes(\"US\") || s.includes(\"USMAR\")) return 'us'; // USMAR is an example\n        console.warn(`Unknown source for country code: ${source}. Could not determine country.`);\n        return null; // Return null if no specific match\n      };\n      const countryCode = getCountryCode(passedStockSource);\n      if (countryCode) {\n        setLogoUrl(`http://${SERVER_IP}/logo/${countryCode}/${ticker}`);\n        const apiUrl = `${CHANGERATE_API_BASE_URL}/changerate/${countryCode}/${ticker}`;\n        console.log(`Workspaceing stock details (price/change) from: ${apiUrl}`);\n        fetch(apiUrl).then(res => {\n          if (!res.ok) {\n            return res.text().then(text => {\n              throw new Error(`네트워크 응답 오류: ${res.status} - ${text || 'Server error'}`);\n            });\n          }\n          return res.json();\n        }).then(data => {\n          setStockPrice(data.yesterday_close !== undefined && data.yesterday_close !== null ? `${Number(data.yesterday_close).toLocaleString('ko-KR')}원` : \"정보 없음\");\n          setStockChange(data.change_rate !== undefined && data.change_rate !== null ? Number(data.change_rate) : null);\n        }).catch(error => {\n          console.error('Error fetching stock details (price/change):', error);\n          setStockPrice(\"정보 조회 실패\");\n          setStockChange(null);\n        });\n      } else {\n        // Handle case where countryCode could not be determined\n        console.error(\"Cannot fetch stock details: Country code could not be determined from source:\", passedStockSource);\n        setStockPrice(\"국가 코드 오류\");\n        setStockChange(null);\n        setLogoUrl(''); // Clear or set a default/error logo\n      }\n    } else {\n      // Handle missing ticker or passedStockSource\n      if (!ticker) {\n        setStockName(\"유효한 종목 티커가 없습니다.\");\n        setStockPrice(\"N/A\");\n        setStockChange(null);\n        setLogoUrl('');\n      } else if (!passedStockSource) {\n        console.warn(\"Stock source not provided for ticker:\", ticker, \". Cannot fetch price/change accurately.\");\n        setStockPrice(\"소스 정보 누락\");\n        setStockChange(null);\n        // Attempt to set a default logo, e.g., assuming 'kr' if source is unknown\n        setLogoUrl(`http://${SERVER_IP}/logo/kr/${ticker}`);\n      }\n    }\n  }, [ticker, passedStockName, passedStockSource]); // Dependencies\n\n  if (!ticker) {\n    return /*#__PURE__*/_jsxDEV(MainLayout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\uC720\\uD6A8\\uD55C \\uC885\\uBAA9 \\uD2F0\\uCEE4\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(MainLayout, {\n    children: /*#__PURE__*/_jsxDEV(ChartSection, {\n      ticker: ticker,\n      stockName: stockName,\n      stockPrice: stockPrice,\n      stockChange: stockChange // Pass the fetched stockChange\n      ,\n      logoUrl: logoUrl,\n      chartServerIp: SERVER_IP\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(ChartPage, \"8TZsrIxhfXuYn4klUYDP8kOXp7Y=\", false, function () {\n  return [useParams, useLocation];\n});\n_c = ChartPage;\nvar _c;\n$RefreshReg$(_c, \"ChartPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useLocation","MainLayout","ChartSection","jsxDEV","_jsxDEV","SERVER_IP","CHANGERATE_API_BASE_URL","ChartPage","_s","_location$state","_location$state2","ticker","location","passedStockName","state","stockName","passedStockSource","stockSource","setStockName","stockPrice","setStockPrice","stockChange","setStockChange","logoUrl","setLogoUrl","getCountryCode","source","console","warn","s","String","toUpperCase","includes","countryCode","apiUrl","log","fetch","then","res","ok","text","Error","status","json","data","yesterday_close","undefined","Number","toLocaleString","change_rate","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","chartServerIp","_c","$RefreshReg$"],"sources":["C:/Users/kimseungwoon/Desktop/REACT/Stock-Analysis-Ai/stock-analysis-ai-react/src/pages/Chart.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams, useLocation } from 'react-router-dom';\r\nimport MainLayout from '../components/MainLayout';\r\nimport ChartSection from '../components/ChartSection';\r\n\r\nconst SERVER_IP = \"172.17.154.182:8080\"; // 로고 및 차트 서버 IP\r\nconst CHANGERATE_API_BASE_URL = 'http://localhost:5000'; // API base for changerate\r\n\r\nexport default function ChartPage() {\r\n  const { ticker } = useParams();\r\n  const location = useLocation();\r\n\r\n  const passedStockName = location.state?.stockName;\r\n  const passedStockSource = location.state?.stockSource; // Get source from navigation state\r\n\r\n  const [stockName, setStockName] = useState(passedStockName || (ticker ? `종목 (${ticker})` : \"종목 정보 로딩 중...\"));\r\n  const [stockPrice, setStockPrice] = useState(\"가격 정보 로딩 중...\");\r\n  const [stockChange, setStockChange] = useState(null); // Use null for loading/error, ChartSection handles non-numbers\r\n  const [logoUrl, setLogoUrl] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Update stockName if passedStockName is available or ticker changes\r\n    if (passedStockName) {\r\n      setStockName(passedStockName);\r\n    } else if (ticker) {\r\n      setStockName(`종목 (${ticker})`);\r\n    } else {\r\n      setStockName(\"종목 정보 로딩 중...\"); // Fallback if no ticker\r\n    }\r\n\r\n    if (ticker && passedStockSource) {\r\n      setStockPrice(\"가격 정보 로딩 중...\"); // Reset on new fetch\r\n      setStockChange(null);              // Reset on new fetch\r\n\r\n      const getCountryCode = (source) => {\r\n        if (!source) {\r\n            console.warn(\"Source is undefined. Cannot determine country code.\");\r\n            return null;\r\n        }\r\n        const s = String(source).toUpperCase();\r\n        if (s.includes(\"KOSPI\") || s.includes(\"KOSDAQ\") || s.includes(\"KRX\") || s === \"KR\") return 'kr';\r\n        if (s.includes(\"NASDAQ\") || s.includes(\"NYSE\") || s.includes(\"US\") || s.includes(\"USMAR\")) return 'us'; // USMAR is an example\r\n        console.warn(`Unknown source for country code: ${source}. Could not determine country.`);\r\n        return null; // Return null if no specific match\r\n      };\r\n\r\n      const countryCode = getCountryCode(passedStockSource);\r\n\r\n      if (countryCode) {\r\n        setLogoUrl(`http://${SERVER_IP}/logo/${countryCode}/${ticker}`);\r\n        const apiUrl = `${CHANGERATE_API_BASE_URL}/changerate/${countryCode}/${ticker}`;\r\n        console.log(`Workspaceing stock details (price/change) from: ${apiUrl}`);\r\n\r\n        fetch(apiUrl)\r\n          .then(res => {\r\n            if (!res.ok) {\r\n              return res.text().then(text => { throw new Error(`네트워크 응답 오류: ${res.status} - ${text || 'Server error'}`); });\r\n            }\r\n            return res.json();\r\n          })\r\n          .then(data => {\r\n            setStockPrice(data.yesterday_close !== undefined && data.yesterday_close !== null ? `${Number(data.yesterday_close).toLocaleString('ko-KR')}원` : \"정보 없음\");\r\n            setStockChange(data.change_rate !== undefined && data.change_rate !== null ? Number(data.change_rate) : null);\r\n          })\r\n          .catch(error => {\r\n            console.error('Error fetching stock details (price/change):', error);\r\n            setStockPrice(\"정보 조회 실패\");\r\n            setStockChange(null);\r\n          });\r\n      } else {\r\n        // Handle case where countryCode could not be determined\r\n        console.error(\"Cannot fetch stock details: Country code could not be determined from source:\", passedStockSource);\r\n        setStockPrice(\"국가 코드 오류\");\r\n        setStockChange(null);\r\n        setLogoUrl(''); // Clear or set a default/error logo\r\n      }\r\n\r\n    } else {\r\n      // Handle missing ticker or passedStockSource\r\n      if (!ticker) {\r\n        setStockName(\"유효한 종목 티커가 없습니다.\");\r\n        setStockPrice(\"N/A\");\r\n        setStockChange(null);\r\n        setLogoUrl('');\r\n      } else if (!passedStockSource) {\r\n        console.warn(\"Stock source not provided for ticker:\", ticker, \". Cannot fetch price/change accurately.\");\r\n        setStockPrice(\"소스 정보 누락\");\r\n        setStockChange(null);\r\n        // Attempt to set a default logo, e.g., assuming 'kr' if source is unknown\r\n        setLogoUrl(`http://${SERVER_IP}/logo/kr/${ticker}`);\r\n      }\r\n    }\r\n  }, [ticker, passedStockName, passedStockSource]); // Dependencies\r\n\r\n  if (!ticker) {\r\n    return (\r\n      <MainLayout>\r\n        <div>유효한 종목 티커가 없습니다.</div>\r\n      </MainLayout>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <MainLayout>\r\n      <ChartSection\r\n        ticker={ticker}\r\n        stockName={stockName}\r\n        stockPrice={stockPrice}\r\n        stockChange={stockChange} // Pass the fetched stockChange\r\n        logoUrl={logoUrl}\r\n        chartServerIp={SERVER_IP}\r\n      />\r\n    </MainLayout>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}