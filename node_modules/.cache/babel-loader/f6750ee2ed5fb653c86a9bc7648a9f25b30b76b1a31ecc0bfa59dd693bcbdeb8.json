{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kimseungwoon\\\\Desktop\\\\REACT\\\\Stock-Analysis-Ai\\\\stock-analysis-ai-react\\\\src\\\\pages\\\\Chart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport MainLayout from '../components/MainLayout';\nimport ChartSection from '../components/ChartSection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SERVER_IP = \"172.17.154.182:8080\"; // 로고, 차트 iframe 및 등락률 API용 서버 IP\n\nexport default function ChartPage() {\n  _s();\n  var _location$state, _location$state2, _location$state3, _location$state4;\n  const {\n    ticker\n  } = useParams();\n  const location = useLocation();\n\n  // StockTable에서 전달받은 정보\n  const passedStockName = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.stockName;\n  const passedStockPrice = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.stockPrice; // StockTable에서 전달된 전일 종가\n  const passedStockChange = (_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.stockChange; // StockTable에서 전달된 등락률\n  const passedStockSource = (_location$state4 = location.state) === null || _location$state4 === void 0 ? void 0 : _location$state4.stockSource; // StockTable에서 현재 전달되지 않지만, 다른 곳에서 받을 경우를 대비\n\n  // ChartPage에서 관리할 상태들. passed 데이터를 우선적으로 사용합니다.\n  const [stockName, setStockName] = useState(passedStockName || (ticker ? `종목 (${ticker})` : \"종목 정보 로딩 중...\"));\n  const [stockPrice, setStockPrice] = useState(passedStockPrice !== undefined ? passedStockPrice : \"가격 정보 로딩 중...\");\n  const [stockChange, setStockChange] = useState(passedStockChange !== undefined ? passedStockChange : null);\n  const [logoUrl, setLogoUrl] = useState('');\n  useEffect(() => {\n    // 종목명 설정: 전달받은 이름이 있다면 사용, 없으면 티커로 임시 설정\n    if (passedStockName) {\n      setStockName(passedStockName);\n    } else if (ticker) {\n      //passedStockName이 없으면 티커로 기본값 설정\n      setStockName(`종목 (${ticker})`);\n    } else {\n      setStockName(\"종목 정보 로딩 중...\"); // 티커도 없는 경우\n    }\n\n    // 로고 URL 설정 (항상 설정 시도)\n    const countryCodeForLogo = passedStockSource && typeof passedStockSource === 'string' && passedStockSource.substring(0, 2).toUpperCase() === \"US\" ? 'us' : 'kr';\n    if (ticker) {\n      setLogoUrl(`http://${SERVER_IP}/logo/${countryCodeForLogo}/${ticker}`);\n    } else {\n      setLogoUrl('');\n    }\n\n    // 전일 종가 및 등락률 설정: StockTable에서 전달받은 정보가 있다면 사용, 없으면 API 호출\n    if (passedStockPrice !== undefined && passedStockChange !== undefined) {\n      setStockPrice(typeof passedStockPrice === 'number' ? `${passedStockPrice.toLocaleString('ko-KR')}원` : passedStockPrice);\n      setStockChange(typeof passedStockChange === 'number' ? passedStockChange : null);\n      console.log(\"StockTable에서 전달받은 정보 사용:\", {\n        name: passedStockName,\n        price: passedStockPrice,\n        change: passedStockChange\n      });\n    } else if (ticker) {\n      // StockTable에서 정보가 전달되지 않았을 경우에만 API 호출\n      setStockPrice(\"가격 정보 로딩 중...\");\n      setStockChange(null);\n      const getCountryCode = source => {\n        if (!source || typeof source !== 'string' || source.length < 2) {\n          console.warn(\"종목 출처(source) 정보가 유효하지 않아 'kr'로 기본 설정합니다. (StockTable은 KR 기반)\");\n          return 'kr'; // StockTable이 KR 기반이므로 기본값을 'kr'로 설정\n        }\n        return source.substring(0, 2).toLowerCase();\n      };\n      const countryCode = getCountryCode(passedStockSource);\n      const apiUrl = `http://${SERVER_IP}/changerate/${countryCode}/${ticker}`;\n      console.log(`StockTable 정보 부재로 API 요청: ${apiUrl}`);\n      fetch(apiUrl).then(res => {\n        if (!res.ok) {\n          return res.text().then(text => {\n            throw new Error(`네트워크 응답 오류: ${res.status} - ${text || '서버 오류'}`);\n          });\n        }\n        return res.json();\n      }).then(data => {\n        setStockPrice(data.yesterday_close !== undefined && data.yesterday_close !== null ? `${Number(data.yesterday_close).toLocaleString('ko-KR')}원` : \"정보 없음\");\n        setStockChange(data.change_rate !== undefined && data.change_rate !== null ? Number(data.change_rate) : null);\n        // StockName이 API 응답에 있다면 업데이트 (검색창을 통해 들어온 경우를 위해)\n        if (!passedStockName && data.stock_name) {\n          setStockName(data.stock_name);\n        }\n      }).catch(error => {\n        console.error('등락률/종가 API 호출 중 오류 발생:', error);\n        setStockPrice(\"정보 조회 실패\");\n        setStockChange(null);\n      });\n    }\n  }, [ticker, passedStockName, passedStockPrice, passedStockChange, passedStockSource]); // 의존성 배열 업데이트\n\n  if (!ticker) {\n    return /*#__PURE__*/_jsxDEV(MainLayout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\uC720\\uD6A8\\uD55C \\uC885\\uBAA9 \\uD2F0\\uCEE4\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(MainLayout, {\n    children: /*#__PURE__*/_jsxDEV(ChartSection, {\n      ticker: ticker,\n      stockName: stockName,\n      stockPrice: stockPrice,\n      stockChange: stockChange,\n      logoUrl: logoUrl,\n      chartServerIp: SERVER_IP\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n}\n_s(ChartPage, \"MVJGJvcQ4kvycHcfQCoRjeug+0w=\", false, function () {\n  return [useParams, useLocation];\n});\n_c = ChartPage;\nvar _c;\n$RefreshReg$(_c, \"ChartPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useLocation","MainLayout","ChartSection","jsxDEV","_jsxDEV","SERVER_IP","ChartPage","_s","_location$state","_location$state2","_location$state3","_location$state4","ticker","location","passedStockName","state","stockName","passedStockPrice","stockPrice","passedStockChange","stockChange","passedStockSource","stockSource","setStockName","setStockPrice","undefined","setStockChange","logoUrl","setLogoUrl","countryCodeForLogo","substring","toUpperCase","toLocaleString","console","log","name","price","change","getCountryCode","source","length","warn","toLowerCase","countryCode","apiUrl","fetch","then","res","ok","text","Error","status","json","data","yesterday_close","Number","change_rate","stock_name","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","chartServerIp","_c","$RefreshReg$"],"sources":["C:/Users/kimseungwoon/Desktop/REACT/Stock-Analysis-Ai/stock-analysis-ai-react/src/pages/Chart.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams, useLocation } from 'react-router-dom';\r\nimport MainLayout from '../components/MainLayout';\r\nimport ChartSection from '../components/ChartSection';\r\n\r\nconst SERVER_IP = \"172.17.154.182:8080\"; // 로고, 차트 iframe 및 등락률 API용 서버 IP\r\n\r\nexport default function ChartPage() {\r\n    const { ticker } = useParams();\r\n    const location = useLocation();\r\n\r\n    // StockTable에서 전달받은 정보\r\n    const passedStockName = location.state?.stockName;\r\n    const passedStockPrice = location.state?.stockPrice; // StockTable에서 전달된 전일 종가\r\n    const passedStockChange = location.state?.stockChange; // StockTable에서 전달된 등락률\r\n    const passedStockSource = location.state?.stockSource; // StockTable에서 현재 전달되지 않지만, 다른 곳에서 받을 경우를 대비\r\n\r\n    // ChartPage에서 관리할 상태들. passed 데이터를 우선적으로 사용합니다.\r\n    const [stockName, setStockName] = useState(passedStockName || (ticker ? `종목 (${ticker})` : \"종목 정보 로딩 중...\"));\r\n    const [stockPrice, setStockPrice] = useState(passedStockPrice !== undefined ? passedStockPrice : \"가격 정보 로딩 중...\");\r\n    const [stockChange, setStockChange] = useState(passedStockChange !== undefined ? passedStockChange : null);\r\n    const [logoUrl, setLogoUrl] = useState('');\r\n\r\n    useEffect(() => {\r\n        // 종목명 설정: 전달받은 이름이 있다면 사용, 없으면 티커로 임시 설정\r\n        if (passedStockName) {\r\n            setStockName(passedStockName);\r\n        } else if (ticker) {\r\n            //passedStockName이 없으면 티커로 기본값 설정\r\n            setStockName(`종목 (${ticker})`); \r\n        } else {\r\n            setStockName(\"종목 정보 로딩 중...\"); // 티커도 없는 경우\r\n        }\r\n\r\n        // 로고 URL 설정 (항상 설정 시도)\r\n        const countryCodeForLogo = passedStockSource && typeof passedStockSource === 'string' && passedStockSource.substring(0, 2).toUpperCase() === \"US\" ? 'us' : 'kr';\r\n        if (ticker) {\r\n            setLogoUrl(`http://${SERVER_IP}/logo/${countryCodeForLogo}/${ticker}`);\r\n        } else {\r\n            setLogoUrl('');\r\n        }\r\n\r\n        // 전일 종가 및 등락률 설정: StockTable에서 전달받은 정보가 있다면 사용, 없으면 API 호출\r\n        if (passedStockPrice !== undefined && passedStockChange !== undefined) {\r\n            setStockPrice(typeof passedStockPrice === 'number' ? `${passedStockPrice.toLocaleString('ko-KR')}원` : passedStockPrice);\r\n            setStockChange(typeof passedStockChange === 'number' ? passedStockChange : null);\r\n            console.log(\"StockTable에서 전달받은 정보 사용:\", { name: passedStockName, price: passedStockPrice, change: passedStockChange });\r\n        } else if (ticker) {\r\n            // StockTable에서 정보가 전달되지 않았을 경우에만 API 호출\r\n            setStockPrice(\"가격 정보 로딩 중...\");\r\n            setStockChange(null);\r\n\r\n            const getCountryCode = (source) => {\r\n                if (!source || typeof source !== 'string' || source.length < 2) {\r\n                    console.warn(\"종목 출처(source) 정보가 유효하지 않아 'kr'로 기본 설정합니다. (StockTable은 KR 기반)\");\r\n                    return 'kr'; // StockTable이 KR 기반이므로 기본값을 'kr'로 설정\r\n                }\r\n                return source.substring(0, 2).toLowerCase();\r\n            };\r\n\r\n            const countryCode = getCountryCode(passedStockSource);\r\n            const apiUrl = `http://${SERVER_IP}/changerate/${countryCode}/${ticker}`;\r\n            console.log(`StockTable 정보 부재로 API 요청: ${apiUrl}`);\r\n\r\n            fetch(apiUrl)\r\n                .then(res => {\r\n                    if (!res.ok) {\r\n                        return res.text().then(text => { throw new Error(`네트워크 응답 오류: ${res.status} - ${text || '서버 오류'}`); });\r\n                    }\r\n                    return res.json();\r\n                })\r\n                .then(data => {\r\n                    setStockPrice(data.yesterday_close !== undefined && data.yesterday_close !== null ? `${Number(data.yesterday_close).toLocaleString('ko-KR')}원` : \"정보 없음\");\r\n                    setStockChange(data.change_rate !== undefined && data.change_rate !== null ? Number(data.change_rate) : null);\r\n                    // StockName이 API 응답에 있다면 업데이트 (검색창을 통해 들어온 경우를 위해)\r\n                    if (!passedStockName && data.stock_name) {\r\n                        setStockName(data.stock_name);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.error('등락률/종가 API 호출 중 오류 발생:', error);\r\n                    setStockPrice(\"정보 조회 실패\");\r\n                    setStockChange(null);\r\n                });\r\n        }\r\n    }, [ticker, passedStockName, passedStockPrice, passedStockChange, passedStockSource]); // 의존성 배열 업데이트\r\n\r\n    if (!ticker) {\r\n        return (\r\n            <MainLayout>\r\n                <div>유효한 종목 티커가 없습니다.</div>\r\n            </MainLayout>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <MainLayout>\r\n            <ChartSection\r\n                ticker={ticker}\r\n                stockName={stockName}\r\n                stockPrice={stockPrice}\r\n                stockChange={stockChange}\r\n                logoUrl={logoUrl}\r\n                chartServerIp={SERVER_IP}\r\n            />\r\n        </MainLayout>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}