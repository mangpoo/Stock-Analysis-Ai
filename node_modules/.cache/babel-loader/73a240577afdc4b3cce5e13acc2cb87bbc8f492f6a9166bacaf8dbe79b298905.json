{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kimseungwoon\\\\Desktop\\\\REACT\\\\Stock-Analysis-Ai\\\\stock-analysis-ai-react\\\\src\\\\pages\\\\Chart.jsx\",\n  _s = $RefreshSig$();\n// src/pages/Chart.jsx\nimport React from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport MainLayout from '../components/MainLayout';\nimport ChartSection from '../components/ChartSection';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SERVER_IP = \"172.17.154.173:8080\"; // 로고 및 차트 서버 IP (StockTable의 IP와 동일하게 가정)\n\nexport default function ChartPage() {\n  _s();\n  var _location$state, _location$state2, _location$state3;\n  const {\n    ticker\n  } = useParams();\n  const location = useLocation();\n  const passedStockName = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.stockName;\n  const passedStockPrice = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.stockPrice;\n  const passedStockChange = (_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.stockChange; // 전달받은 등락률\n\n  const [stockName, setStockName] = useState(passedStockName || \"종목 정보 로딩 중...\");\n  const [stockPrice, setStockPrice] = useState(passedStockPrice !== undefined && passedStockPrice !== \"N/A\" ? typeof passedStockPrice === 'number' ? `${passedStockPrice.toLocaleString('ko-KR')}원` : passedStockPrice : \"가격 정보 로딩 중...\");\n  // 등락률 상태 추가\n  const [stockChange, setStockChange] = useState(passedStockChange !== undefined ? passedStockChange : 0.0 // 기본값 0.0 또는 로딩 메시지\n  );\n  const [logoUrl, setLogoUrl] = useState('');\n  useEffect(() => {\n    if (ticker) {\n      setLogoUrl(`http://${SERVER_IP}/logo/kr/${ticker}`); // SERVER_IP 사용\n      if (!passedStockName) {\n        setStockName(`종목 (${ticker})`);\n        // 필요시 API 호출로 실제 종목명, 현재가, 등락률 가져오기\n      }\n      if (passedStockPrice === undefined) {\n        // API 호출로 현재가 가져오기\n      }\n      if (passedStockChange === undefined) {\n        // API 호출로 등락률 가져오기\n        // 예: setStockChange(fetchedChange);\n      } else {\n        setStockChange(passedStockChange);\n      }\n    }\n  }, [ticker, passedStockName, passedStockPrice, passedStockChange]); // passedStockChange 의존성 배열에 추가\n\n  if (!ticker) {\n    return /*#__PURE__*/_jsxDEV(MainLayout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\uC720\\uD6A8\\uD55C \\uC885\\uBAA9 \\uD2F0\\uCEE4\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(MainLayout, {\n    children: /*#__PURE__*/_jsxDEV(ChartSection, {\n      ticker: ticker,\n      stockName: stockName,\n      stockPrice: stockPrice,\n      stockChange: stockChange // stockChange prop 전달\n      ,\n      logoUrl: logoUrl,\n      chartServerIp: SERVER_IP // SERVER_IP 사용\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(ChartPage, \"Y18KZlI5be2tiEuSAMtBrAkMF74=\", false, function () {\n  return [useParams, useLocation];\n});\n_c = ChartPage;\nvar _c;\n$RefreshReg$(_c, \"ChartPage\");","map":{"version":3,"names":["React","useParams","useLocation","MainLayout","ChartSection","useEffect","useState","jsxDEV","_jsxDEV","SERVER_IP","ChartPage","_s","_location$state","_location$state2","_location$state3","ticker","location","passedStockName","state","stockName","passedStockPrice","stockPrice","passedStockChange","stockChange","setStockName","setStockPrice","undefined","toLocaleString","setStockChange","logoUrl","setLogoUrl","children","fileName","_jsxFileName","lineNumber","columnNumber","chartServerIp","_c","$RefreshReg$"],"sources":["C:/Users/kimseungwoon/Desktop/REACT/Stock-Analysis-Ai/stock-analysis-ai-react/src/pages/Chart.jsx"],"sourcesContent":["// src/pages/Chart.jsx\r\nimport React from 'react';\r\nimport { useParams, useLocation } from 'react-router-dom';\r\nimport MainLayout from '../components/MainLayout';\r\nimport ChartSection from '../components/ChartSection';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst SERVER_IP = \"172.17.154.173:8080\"; // 로고 및 차트 서버 IP (StockTable의 IP와 동일하게 가정)\r\n\r\nexport default function ChartPage() {\r\n  const { ticker } = useParams();\r\n  const location = useLocation();\r\n\r\n  const passedStockName = location.state?.stockName;\r\n  const passedStockPrice = location.state?.stockPrice;\r\n  const passedStockChange = location.state?.stockChange; // 전달받은 등락률\r\n\r\n  const [stockName, setStockName] = useState(passedStockName || \"종목 정보 로딩 중...\");\r\n  const [stockPrice, setStockPrice] = useState(\r\n    passedStockPrice !== undefined && passedStockPrice !== \"N/A\"\r\n      ? (typeof passedStockPrice === 'number' ? `${passedStockPrice.toLocaleString('ko-KR')}원` : passedStockPrice)\r\n      : \"가격 정보 로딩 중...\"\r\n  );\r\n  // 등락률 상태 추가\r\n  const [stockChange, setStockChange] = useState(\r\n    passedStockChange !== undefined ? passedStockChange : 0.0 // 기본값 0.0 또는 로딩 메시지\r\n  );\r\n  const [logoUrl, setLogoUrl] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (ticker) {\r\n      setLogoUrl(`http://${SERVER_IP}/logo/kr/${ticker}`); // SERVER_IP 사용\r\n      if (!passedStockName) {\r\n        setStockName(`종목 (${ticker})`);\r\n        // 필요시 API 호출로 실제 종목명, 현재가, 등락률 가져오기\r\n      }\r\n      if (passedStockPrice === undefined) {\r\n          // API 호출로 현재가 가져오기\r\n      }\r\n      if (passedStockChange === undefined) {\r\n          // API 호출로 등락률 가져오기\r\n          // 예: setStockChange(fetchedChange);\r\n      } else {\r\n          setStockChange(passedStockChange);\r\n      }\r\n    }\r\n  }, [ticker, passedStockName, passedStockPrice, passedStockChange]); // passedStockChange 의존성 배열에 추가\r\n\r\n  if (!ticker) {\r\n    return (\r\n      <MainLayout>\r\n        <div>유효한 종목 티커가 없습니다.</div>\r\n      </MainLayout>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <MainLayout>\r\n      <ChartSection\r\n        ticker={ticker}\r\n        stockName={stockName}\r\n        stockPrice={stockPrice}\r\n        stockChange={stockChange} // stockChange prop 전달\r\n        logoUrl={logoUrl}\r\n        chartServerIp={SERVER_IP} // SERVER_IP 사용\r\n      />\r\n    </MainLayout>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}